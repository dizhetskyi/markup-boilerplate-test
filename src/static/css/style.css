/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
.icon-fb-messanger {
  background-image: url(../i/sprite.png);
  background-position: -41px 0px;
  width: 40px;
  height: 41px; }

.icon-skype-messanger-hover, .icon-skype-messanger:hover {
  background-image: url(../i/sprite.png);
  background-position: -81px 0px;
  width: 40px;
  height: 41px; }

.icon-skype-messanger {
  background-image: url(../i/sprite.png);
  background-position: 0px -42px;
  width: 40px;
  height: 41px; }

.icon-viber-messanger {
  background-image: url(../i/sprite.png);
  background-position: 0px 0px;
  width: 41px;
  height: 42px; }

#popup {
  background: #000;
  width: 1000px;
  color: #fff; }

.list {
  padding: 20px; }
  .list .item {
    margin: 20px 0;
    font-size: 20px; }

.icon {
  display: inline-block;
  vertical-align: middle; }

.test {
  line-height: 20px; }
